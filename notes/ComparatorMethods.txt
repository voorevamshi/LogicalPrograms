======================Comparator methods=====================
1.Comparator<T> comparing(Function keyExtractor) 		 			--> Builds a comparator based on object field
																	employees.stream().sorted(Comparator.comparing(Employee::getName,Comparator.nullsFirst(Comparator.naturalOrder()))
2.Comparator<T> comparingInt(ToIntFunction keyExtractor) 			--> Specialized version for comparing int fields
																	employees.stream().sorted(Comparator.comparingInt(Employee::getId)).collect(Collectors.toList);
3.Comparator<T> comparingDouble(ToDoubleFunction keyExtractor)  	--> Specialized version for comparing double fields
																	employees.stream().sorted(Comparator.comparingDouble(Employee::getSalary)).collect(Collectors.toList())
4.Comparator<T> comparingLong(ToLongFunction keyExtractor)	        --> Specialized version for comparing long fields
																	employees.stream().sorted(Comparator.comparingLong(emp->emp.getJoinDate().getTime())).toList()
5.Comparator<T> naturalOrder()		   -->Returns a comparator that comares object according to theri natural ordering(e.g String, Integer)
										Employee should implements Comparable(Means needs to override compare(){this.name.compareTo(other.name)}) and employees.sort(Comparator.nullsFirst(Comparator.naturalOrder()));
										
6.Comparator<T> reverseOrder()     	   -->Returns a comparator that imposes the reverse of the natural orderering
										Employee should implements Comparable and employees.sort( Comparator.nullsFirst(Comparator.reverseOrder()));

7.Comparator<T> nullsFirst				employees.sort(Comparator.comparing(Employee::getName,Comparator.nullsFirst(Comparator.naturalOrder())));
										
8.Comparator<T> nullsLast				employees.sort(Comparator.comparing(Employee::getName,Comparator.nullsLast(Comparator.naturalOrder())));
			
9.Comparator<T> thenComparing          -->Used for multi-level sorting(secondary sorting if primary sort is equal)
										employees.stream().sorted(Comparator.comparingDouble(Employee::getSalary).thenComparing(Employee::getName).collect(Collectors.toList);
10.Comparator<T> reversed() 			 -->Returns a comparator that reverses the natural order
										employees.sort(Comparator.comparingDouble(Employee::getSalary)).reversed().collect(Collectors.toList);
		
int 		  compare(T o1, T o2)      -->Compares two objects and returns negative, zero or positive. based on sorting order(abstract method)
										Comparator<Employee> sortBySalary=(e1,e2)->Double.compare(e1.getSalary(),e2.getSalary())
										
compareTo method
current object is less than the other. returns <0
current object is equal to the other. returns 0
current object is grater than the other. returns >0
----->BinaryOperator methods
T apply(T t1, T t2)                    -->Takes two inputs of type T and returns a value of type T.
----->BinaryOperator methods										

