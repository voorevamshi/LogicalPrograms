List<Integer> intList = input.chars().mapToObj(c -> c - '0').toList();

input.chars(): This method converts the input string into an IntStream, 
where each element in the stream represents the Unicode value of a character in the string. 
For example, if input is "153", the stream will contain the values [49, 53, 51] (the Unicode values of '1', '5', and '3').  

.mapToObj(c -> c - '0'):
The mapToObj function is used to transform each Unicode value in the stream into its corresponding integer representation. 
The expression c - '0' works because the Unicode value of '0' is subtracted from the Unicode value of the character c, effectively converting the character to its numeric value. 
For example, '1' - '0' results in 1, '5' - '0' results in 5, and so on.
  
The Stream class in Java provides several methods like 
Stream<T>    mapToObj:    Converts each element of the stream into an object of a different type.Ex: IntStream.of(1, 2, 3).mapToObj(i -> "Number: " + i);
IntStream    mapToInt:    Converts each element of the stream into an int value.Ex: Stream.of("1", "2", "3").mapToObj(i -> "Number: " + i);
LongStream   mapToLong:   Converts each element of the stream into a long value.Ex: Stream.of("10000000000", "20000000000").mapToLong(Long::parseLong); 
DoubleStream mapToDouble: Converts each element of the stream into a double value.Ex: Stream.of("1.5", "2.5", "3.5").mapToDouble(Double::parseDouble);
to transform elements in a stream into different types of streams. 


.toList(): Finally, the toList() method collects the transformed stream elements into a List<Integer>. This results in a list of integers representing the digits in the input string.
For example, if input is "153", the resulting intList will be [1, 5, 3].

The Stream class in Java provides several collect methods
======================Collectors methods=====================
1.List<S> 		toList()		:Collects the elements into a List. 									            Ex: Stream.of("A", "B", "C").collect(Collectors.toList());
2.Set<S>  		toSet() 		:Collects the elements  Set (removes duplicates). 				                    Ex: Stream.of("A", "B", "A").collect(Collectors.toSet());
3.Map<I, S>		toMap()			:Collects the elements of the stream into a Map using key and value mapping fun.    Ex: Stream.of("A", "BB", "CCC").toMap(String::length, s -> s)

4.String 			joining() 		:Concatenates the elements of the stream into a single String.					    Ex: Stream.of("A", "B", "C").collect(Col.joining(", "));
5.Map<I, List<S>>	groupingBy()	:Groups the elements by a classifier returns a Map.keys are the classifier results. Ex: Stream.of("A", "BB", "CCC").groupingBy(String::length)
8.Map<B, List<I>>   partitioningBy():Partitions the elements of the stream into two groups based on a predicate.		Ex: Stream.of(1, 2, 3, 4).partitioningBy(n -> n % 2 == 0)

9.long			    counting()		:Counts the number of elements in the stream.							   Ex: Stream.of("A", "B", "C").counting();
10.int				reducing()		:Performs a reduction operation on the elements of the stream.			   Ex: Stream.of(1, 2, 3).reducing(0, Integer::sum);
11.List<I>			mapping()		:Applies a mapping function to the elements before collecting them	       Ex:Stream.of("A", "BB", "CCC").Collectors.mapping(i -> i * 2, toList())

13.IntSummaryStatistics		summarizingInt()	:Ex:Stream.of(1, 2, 3).summarizingInt(Integer::intValue).getSum()
16.DoubleSummaryStatistics 	summarizingDouble() :Ex:Stream.of(1.5, 2.5, 3.5) .collect(Collectors.summarizingDouble(Double::doubleValue)).getAverage()
17.LongSummaryStatistics    summarizingLong() 	:Ex:Stream.of(1L, 2L,3L).collect(Collectors.summarizingLong(Long::longValue)).getMax()

18.Optional<Double>maxBy	    :maximum value in a stream of doubles                              	Ex:Stream.of(1.0, 2.0, 3.0,4.0).maxBy(Comparator.comparingDouble(i -> i)));
19.Optional<Long>minBy          :minimum value in a stream of longs							        Ex:Stream.of(1L, 2L, 3L,4L).minBy(Comparator.naturalOrder()));

Here statistics is nothing but (count, sum, min, average, max).
======================Comparator methods=====================
1.Comparator<T> comparing(Function keyExtractor) 		 			--> Builds a comparator based on object field
																	employees.stream().sorted(Comparator.comparing(Employee::getName,Comparator.nullsFirst(Comparator.naturalOrder()))
2.Comparator<T> comparingInt(ToIntFunction keyExtractor) 			--> Specialized version for comparing int fields
																	employees.stream().sorted(Comparator.comparingInt(Employee::getId)).collect(Collectors.toList);
3.Comparator<T> comparingDouble(ToDoubleFunction keyExtractor)  	--> Specialized version for comparing double fields
																	employees.stream().sorted(Comparator.comparingDouble(Employee::getSalary)).collect(Collectors.toList())
4.Comparator<T> comparingLong(ToLongFunction keyExtractor)	        --> Specialized version for comparing long fields
																	employees.stream().sorted(Comparator.comparingLong(emp->emp.getJoinDate().getTime())).toList()
5.Comparator<T> naturalOrder()		 -->Returns a comparator that comares object according to theri natural ordering(e.g String, Integer)
										Employee should implements Comparable(Means needs to override compare(){this.name.compareTo(other.name)}) and employees.sort(Comparator.nullsFirst(Comparator.naturalOrder()));
										
6.Comparator<T> reverseOrder()     	  -->Returns a comparator that imposes the reverse of the natural orderering
										Employee should implements Comparable and employees.sort( Comparator.nullsFirst(Comparator.reverseOrder()));

7.Comparator<T> nullsFirst				employees.sort(Comparator.comparing(Employee::getName,Comparator.nullsFirst(Comparator.naturalOrder())));
										
8.Comparator<T> nullsLast				employees.sort(Comparator.comparing(Employee::getName,Comparator.nullsLast(Comparator.naturalOrder())));
			
9.Comparator<T> thenComparing          -->Used for multi-level sorting(secondary sorting if primary sort is equal)
										employees.stream().sorted(Comparator.comparingDouble(Employee::getSalary).thenComparing(Employee::getName).collect(Collectors.toList);
10.Comparator<T> reversed() 			 -->Returns a comparator that reverses the natural order
										employees.sort(Comparator.comparingDouble(Employee::getSalary)).reversed().collect(Collectors.toList);
		
int 		  compare(T o1, T o2)      -->Compares two objects and returns negative, zero or positive. based on sorting order(abstract method)
										Comparator<Employee> sortBySalary=(e1,e2)->Double.compare(e1.getSalary(),e2.getSalary())
										
compareTo method
current object is less than the other. returns <0
current object is equal to the other. returns 0
current object is grater than the other. returns >0
======================Collector Grouping Methods=====================

